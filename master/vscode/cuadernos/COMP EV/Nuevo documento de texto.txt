import numpy as np

def nsga_ii(poblacion, tabla_distancias,ciudades):
    # Calcular la aptitud para cada individuo en la población
    distances = [calcular_distancia_total(decod_suboptima(num_ciudades,cromosoma,m,tabla_distancias,ciudades), tabla_costes) for cromosoma in poblacion]
    costs = [calcular_distancia_total(decod_suboptima(num_ciudades,cromosoma,m,tabla_distancias,ciudades),costes_distancias) for cromosoma in poblacion]

    # Clasificar a los individuos en frentes de Pareto
    pareto_fronts = fast_non_dominated_sort(distances, costs)

    # Calcular la distancia de aglomeración para cada individuo
    crowding_distances = []
    for front in pareto_fronts:
        front_distances = compute_crowding_distance(front, distances, costs)
        crowding_distances.extend(front_distances)

    # Seleccionar individuos para la próxima generación basado en la clasificación de Pareto y la distancia de aglomeración
    next_generation = select_next_generation(poblacion, pareto_fronts, crowding_distances)

    return next_generation

def fast_non_dominated_sort(distances, costs):
    S = [[] for _ in range(len(distances))]
    n = [0 for _ in range(len(distances))]
    ranks = [0 for _ in range(len(distances))]
    fronts = [[]]

    for p in range(len(distances)):
        for q in range(len(distances)):
            if (distances[p] < distances[q] and costs[p] < costs[q]) or (distances[p] <= distances[q] and costs[p] < costs[q]) or (distances[p] < distances[q] and costs[p] <= costs[q]):
                S[p].append(q)
            elif (distances[q] < distances[p] and costs[q] < costs[p]) or (distances[q] <= distances[p] and costs[q] < costs[p]) or (distances[q] < distances[p] and costs[q] <= costs[p]):
                n[p] += 1
        if n[p] == 0:
            ranks[p] = 0
            fronts[0].append(p)

    i = 0
    while fronts[i]:
        next_front = []
        for p in fronts[i]:
            for q in S[p]:
                n[q] -= 1
                if n[q] == 0:
                    ranks[q] = i + 1
                    next_front.append(q)
        i += 1
        fronts.append(next_front)
    del fronts[-1]
    return fronts

def compute_crowding_distance(front, distances, costs):
    # Inicializar distancias a 0
    l = len(front)
    distance = [0 for _ in range(l)]
    
    # Si el frente tiene menos de 3 individuos, devolver infinito para todos
    if l < 3:
        return [float('inf') for _ in range(l)]
    
    for m, objs in enumerate([distances, costs]):
        # Ordenar según el objetivo m y actualizar la distancia
        sorted_front = sorted(front, key=lambda x: objs[x])
        distance[0] = distance[-1] = float('inf')
        norm = max(objs) - min(objs)
        for i in range(1, l - 1):
            distance[i] += (objs[sorted_front[i + 1]] - objs[sorted_front[i - 1]]) / norm
    return distance

def select_next_generation(poblacion, pareto_fronts, crowding_distances, size=None):
    if size is None:
        size = len(poblacion)
    
    next_population = []
    for front in pareto_fronts:
        if len(next_population) + len(front) <= size:
            next_population.extend([poblacion[i] for i in front])
        else:
            sorted_front = sorted(front, key=lambda x: (-crowding_distances[x]))
            next_population.extend([poblacion[i] for i in sorted_front[:size - len(next_population)]])
            break
    return next_population